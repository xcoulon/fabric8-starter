// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "fabric8-starter": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/fabric8-services/fabric8-starter/design
// --out=$(GOPATH)/src/github.com/fabric8-services/fabric8-starter
// --version=v1.3.0

package app

import (
	"context"
	"github.com/goadesign/goa"
	uuid "github.com/satori/go.uuid"
	"net/http"
)

// CreateLabelContext provides the label create action context.
type CreateLabelContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateLabelPayload
}

// NewCreateLabelContext parses the incoming request URL and body, performs validations and creates the
// context used by the label controller create action.
func NewCreateLabelContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateLabelContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateLabelContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// createLabelPayload is the label create action payload.
type createLabelPayload struct {
	Data *label `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createLabelPayload) Validate() (err error) {
	if payload.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "data"))
	}
	if payload.Data != nil {
		if err2 := payload.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Publicize creates CreateLabelPayload from createLabelPayload
func (payload *createLabelPayload) Publicize() *CreateLabelPayload {
	var pub CreateLabelPayload
	if payload.Data != nil {
		pub.Data = payload.Data.Publicize()
	}
	if payload.Included != nil {
		pub.Included = payload.Included
	}
	return &pub
}

// CreateLabelPayload is the label create action payload.
type CreateLabelPayload struct {
	Data *Label `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateLabelPayload) Validate() (err error) {
	if payload.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "data"))
	}
	if payload.Data != nil {
		if err2 := payload.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateLabelContext) Created(r *LabelSingle) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateLabelContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *CreateLabelContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *CreateLabelContext) Forbidden(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 403, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *CreateLabelContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *CreateLabelContext) Conflict(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateLabelContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ListLabelContext provides the label list action context.
type ListLabelContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	IfModifiedSince *string
	IfNoneMatch     *string
}

// NewListLabelContext parses the incoming request URL and body, performs validations and creates the
// context used by the label controller list action.
func NewListLabelContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListLabelContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListLabelContext{Context: ctx, ResponseData: resp, RequestData: req}
	headerIfModifiedSince := req.Header["If-Modified-Since"]
	if len(headerIfModifiedSince) > 0 {
		rawIfModifiedSince := headerIfModifiedSince[0]
		req.Params["If-Modified-Since"] = []string{rawIfModifiedSince}
		rctx.IfModifiedSince = &rawIfModifiedSince
	}
	headerIfNoneMatch := req.Header["If-None-Match"]
	if len(headerIfNoneMatch) > 0 {
		rawIfNoneMatch := headerIfNoneMatch[0]
		req.Params["If-None-Match"] = []string{rawIfNoneMatch}
		rctx.IfNoneMatch = &rawIfNoneMatch
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListLabelContext) OK(r *LabelList) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotModified sends a HTTP response with status code 304.
func (ctx *ListLabelContext) NotModified() error {
	ctx.ResponseData.WriteHeader(304)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListLabelContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListLabelContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowLabelContext provides the label show action context.
type ShowLabelContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	IfModifiedSince *string
	IfNoneMatch     *string
	LabelID         uuid.UUID
}

// NewShowLabelContext parses the incoming request URL and body, performs validations and creates the
// context used by the label controller show action.
func NewShowLabelContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowLabelContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowLabelContext{Context: ctx, ResponseData: resp, RequestData: req}
	headerIfModifiedSince := req.Header["If-Modified-Since"]
	if len(headerIfModifiedSince) > 0 {
		rawIfModifiedSince := headerIfModifiedSince[0]
		req.Params["If-Modified-Since"] = []string{rawIfModifiedSince}
		rctx.IfModifiedSince = &rawIfModifiedSince
	}
	headerIfNoneMatch := req.Header["If-None-Match"]
	if len(headerIfNoneMatch) > 0 {
		rawIfNoneMatch := headerIfNoneMatch[0]
		req.Params["If-None-Match"] = []string{rawIfNoneMatch}
		rctx.IfNoneMatch = &rawIfNoneMatch
	}
	paramLabelID := req.Params["labelID"]
	if len(paramLabelID) > 0 {
		rawLabelID := paramLabelID[0]
		if labelID, err2 := uuid.FromString(rawLabelID); err2 == nil {
			rctx.LabelID = labelID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("labelID", rawLabelID, "uuid"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowLabelContext) OK(r *LabelSingle) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotModified sends a HTTP response with status code 304.
func (ctx *ShowLabelContext) NotModified() error {
	ctx.ResponseData.WriteHeader(304)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowLabelContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowLabelContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowLabelContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// UpdateLabelContext provides the label update action context.
type UpdateLabelContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	LabelID uuid.UUID
	Payload *UpdateLabelPayload
}

// NewUpdateLabelContext parses the incoming request URL and body, performs validations and creates the
// context used by the label controller update action.
func NewUpdateLabelContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateLabelContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateLabelContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramLabelID := req.Params["labelID"]
	if len(paramLabelID) > 0 {
		rawLabelID := paramLabelID[0]
		if labelID, err2 := uuid.FromString(rawLabelID); err2 == nil {
			rctx.LabelID = labelID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("labelID", rawLabelID, "uuid"))
		}
	}
	return &rctx, err
}

// updateLabelPayload is the label update action payload.
type updateLabelPayload struct {
	Data *label `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *updateLabelPayload) Validate() (err error) {
	if payload.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "data"))
	}
	if payload.Data != nil {
		if err2 := payload.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Publicize creates UpdateLabelPayload from updateLabelPayload
func (payload *updateLabelPayload) Publicize() *UpdateLabelPayload {
	var pub UpdateLabelPayload
	if payload.Data != nil {
		pub.Data = payload.Data.Publicize()
	}
	if payload.Included != nil {
		pub.Included = payload.Included
	}
	return &pub
}

// UpdateLabelPayload is the label update action payload.
type UpdateLabelPayload struct {
	Data *Label `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *UpdateLabelPayload) Validate() (err error) {
	if payload.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "data"))
	}
	if payload.Data != nil {
		if err2 := payload.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateLabelContext) OK(r *LabelSingle) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateLabelContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *UpdateLabelContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *UpdateLabelContext) Forbidden(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 403, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateLabelContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *UpdateLabelContext) Conflict(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateLabelContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowStatusContext provides the status show action context.
type ShowStatusContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewShowStatusContext parses the incoming request URL and body, performs validations and creates the
// context used by the status controller show action.
func NewShowStatusContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowStatusContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowStatusContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowStatusContext) OK(r *Status) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.status+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ShowStatusContext) ServiceUnavailable(r *Status) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.status+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 503, r)
}
